% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/promise.R
\name{new_promise}
\alias{new_promise}
\alias{resolved}
\alias{rejected}
\title{Create a new promise object}
\usage{
new_promise(action)

resolved(value)

rejected(reason)
}
\arguments{
\item{action}{Either a function with signature \code{function(resolve,
reject)}, or a one-sided formula. See Details.}
}
\value{
A promise object (see \link{\code{then}}).
}
\description{
\code{new_promise} creates a new promise. A promise is a placeholder object
for the eventual result (or error) of an asynchronous operation. This
function is not generally needed to carry out asynchronous programming tasks;
instead, it is intended to be used mostly by package authors who want to
write asynchronous functions that return promises.
}
\details{
The \code{action} function/formula should be a piece of code that returns
quickly, but initiates a potentially long-running, asynchronous task. If/when
the task successfully completes, call \code{resolve(value)} where
\code{value} is the result of the computation (like the return value). If the
task fails, call \code{reject(reason)}, where \code{reason} is either an
error object, or a character string.

It's important that asynchronous tasks kicked off from \code{action} be coded
very carefully--in particular, all errors must be caught and passed to
\code{reject()}. Failure to do so will cause those errors to be lost, at
best; and the caller of the asynchronous task will never receive a response
(the asynchronous equivalent of a function call that never returns, i.e.
hangs).

The return value of \code{action} will be ignored.
}
\examples{
TODO

}
